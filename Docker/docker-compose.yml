services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    restart: always
    depends_on:
      - frontend
      - backend
    networks:
      - tiki-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - tiki-network
  
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile.frontend
    expose:
      - "3000"
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=https://api.votredomaine.com
    restart: unless-stopped
    networks:
      - tiki-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    expose:
      - "3001"
    depends_on:
      - postgres
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres_secure_password
      - DB_NAME=tiki_resto
      - PORT=3001
    volumes:
      - uploads:/app/uploads
    restart: unless-stopped
    networks:
      - tiki-network

  postgres:
    image: postgres:15-alpine
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_secure_password
      - POSTGRES_DB=tiki_resto
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - tiki-network

  adminer:
    image: adminer
    restart: unless-stopped
    expose:
      - "8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - tiki-network

volumes:
  postgres-data:
  uploads:

networks:
  tiki-network:
    driver: bridge 